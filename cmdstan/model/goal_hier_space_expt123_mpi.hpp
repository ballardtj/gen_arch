// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace goal_hier_space_expt123_mpi_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model/goal_hier_space_expt123_mpi.stan");
    reader.add_event(200, 198, "end", "model/goal_hier_space_expt123_mpi.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
goal_sub(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
             const std::vector<T2__>& real_data,
             const std::vector<int>& int_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        int Nvalid(0);
        (void) Nvalid;  // dummy to suppress unused var warning
        stan::math::fill(Nvalid, std::numeric_limits<int>::min());
        stan::math::assign(Nvalid,get_base1(int_data,1,"int_data",1));

        current_statement_begin__ = 10;
        int Nplaces(0);
        (void) Nplaces;  // dummy to suppress unused var warning
        stan::math::fill(Nplaces, std::numeric_limits<int>::min());
        stan::math::assign(Nplaces,get_base1(int_data,2,"int_data",1));

        current_statement_begin__ = 14;
        validate_non_negative_index("dat", "3", 3);
        validate_non_negative_index("dat", "Nvalid", Nvalid);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> dat(3, Nvalid);
        stan::math::initialize(dat, DUMMY_VAR__);
        stan::math::fill(dat, DUMMY_VAR__);

        current_statement_begin__ = 15;
        validate_non_negative_index("weights", "3", 3);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> weights(3);
        stan::math::initialize(weights, DUMMY_VAR__);
        stan::math::fill(weights, DUMMY_VAR__);

        current_statement_begin__ = 16;
        validate_non_negative_index("p_a_logit", "Nvalid", Nvalid);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> p_a_logit(Nvalid);
        stan::math::initialize(p_a_logit, DUMMY_VAR__);
        stan::math::fill(p_a_logit, DUMMY_VAR__);

        current_statement_begin__ = 17;
        validate_non_negative_index("y_sub", "Nvalid", Nvalid);
        std::vector<int  > y_sub(Nvalid, int(0));
        stan::math::fill(y_sub, std::numeric_limits<int>::min());

        current_statement_begin__ = 20;
        local_scalar_t__ delta_sub(DUMMY_VAR__);
        (void) delta_sub;  // dummy to suppress unused var warning
        stan::math::initialize(delta_sub, DUMMY_VAR__);
        stan::math::fill(delta_sub, DUMMY_VAR__);
        stan::math::assign(delta_sub,get_base1(theta,4,"theta",1));

        current_statement_begin__ = 21;
        local_scalar_t__ tau_sub(DUMMY_VAR__);
        (void) tau_sub;  // dummy to suppress unused var warning
        stan::math::initialize(tau_sub, DUMMY_VAR__);
        stan::math::fill(tau_sub, DUMMY_VAR__);
        stan::math::assign(tau_sub,get_base1(theta,5,"theta",1));

        current_statement_begin__ = 22;
        local_scalar_t__ alpha_sub(DUMMY_VAR__);
        (void) alpha_sub;  // dummy to suppress unused var warning
        stan::math::initialize(alpha_sub, DUMMY_VAR__);
        stan::math::fill(alpha_sub, DUMMY_VAR__);
        stan::math::assign(alpha_sub,get_base1(theta,6,"theta",1));

        current_statement_begin__ = 23;
        local_scalar_t__ one_m_alpha_sub(DUMMY_VAR__);
        (void) one_m_alpha_sub;  // dummy to suppress unused var warning
        stan::math::initialize(one_m_alpha_sub, DUMMY_VAR__);
        stan::math::fill(one_m_alpha_sub, DUMMY_VAR__);
        stan::math::assign(one_m_alpha_sub,(1 - alpha_sub));

        current_statement_begin__ = 24;
        local_scalar_t__ a_sg(DUMMY_VAR__);
        (void) a_sg;  // dummy to suppress unused var warning
        stan::math::initialize(a_sg, DUMMY_VAR__);
        stan::math::fill(a_sg, DUMMY_VAR__);

        current_statement_begin__ = 25;
        local_scalar_t__ b_sg(DUMMY_VAR__);
        (void) b_sg;  // dummy to suppress unused var warning
        stan::math::initialize(b_sg, DUMMY_VAR__);
        stan::math::fill(b_sg, DUMMY_VAR__);

        current_statement_begin__ = 26;
        local_scalar_t__ a_tg(DUMMY_VAR__);
        (void) a_tg;  // dummy to suppress unused var warning
        stan::math::initialize(a_tg, DUMMY_VAR__);
        stan::math::fill(a_tg, DUMMY_VAR__);

        current_statement_begin__ = 27;
        local_scalar_t__ b_tg(DUMMY_VAR__);
        (void) b_tg;  // dummy to suppress unused var warning
        stan::math::initialize(b_tg, DUMMY_VAR__);
        stan::math::fill(b_tg, DUMMY_VAR__);

        current_statement_begin__ = 28;
        local_scalar_t__ a_stg_tmp(DUMMY_VAR__);
        (void) a_stg_tmp;  // dummy to suppress unused var warning
        stan::math::initialize(a_stg_tmp, DUMMY_VAR__);
        stan::math::fill(a_stg_tmp, DUMMY_VAR__);

        current_statement_begin__ = 29;
        local_scalar_t__ b_stg_tmp(DUMMY_VAR__);
        (void) b_stg_tmp;  // dummy to suppress unused var warning
        stan::math::initialize(b_stg_tmp, DUMMY_VAR__);
        stan::math::fill(b_stg_tmp, DUMMY_VAR__);

        current_statement_begin__ = 30;
        local_scalar_t__ a_stg(DUMMY_VAR__);
        (void) a_stg;  // dummy to suppress unused var warning
        stan::math::initialize(a_stg, DUMMY_VAR__);
        stan::math::fill(a_stg, DUMMY_VAR__);

        current_statement_begin__ = 31;
        local_scalar_t__ b_stg(DUMMY_VAR__);
        (void) b_stg;  // dummy to suppress unused var warning
        stan::math::initialize(b_stg, DUMMY_VAR__);
        stan::math::fill(b_stg, DUMMY_VAR__);

        current_statement_begin__ = 34;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);


        current_statement_begin__ = 37;
        stan::model::assign(weights, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (get_base1(phi,1,"phi",1) + (get_base1(phi,2,"phi",1) * get_base1(theta,1,"theta",1))), 
                    "assigning variable weights");
        current_statement_begin__ = 38;
        stan::model::assign(weights, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    (get_base1(phi,3,"phi",1) + (get_base1(phi,4,"phi",1) * get_base1(theta,2,"theta",1))), 
                    "assigning variable weights");
        current_statement_begin__ = 39;
        stan::model::assign(weights, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    ((((get_base1(phi,5,"phi",1) + (get_base1(phi,6,"phi",1) * get_base1(theta,3,"theta",1))) * 2) * one_m_alpha_sub) * stan::math::sqrt((alpha_sub / one_m_alpha_sub))), 
                    "assigning variable weights");
        current_statement_begin__ = 41;
        for (int i = 1; i <= Nvalid; ++i) {

            current_statement_begin__ = 44;
            stan::math::assign(a_sg, stan::math::exp((get_base1(real_data,i,"real_data",1) * delta_sub)));
            current_statement_begin__ = 45;
            stan::math::assign(b_sg, stan::math::exp((get_base1(real_data,(Nplaces + i),"real_data",1) * delta_sub)));
            current_statement_begin__ = 46;
            stan::model::assign(dat, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        (a_sg - b_sg), 
                        "assigning variable dat");
            current_statement_begin__ = 49;
            stan::math::assign(a_tg, stan::math::exp((get_base1(real_data,((2 * Nplaces) + i),"real_data",1) * tau_sub)));
            current_statement_begin__ = 50;
            stan::math::assign(b_tg, stan::math::exp((get_base1(real_data,((3 * Nplaces) + i),"real_data",1) * tau_sub)));
            current_statement_begin__ = 51;
            stan::model::assign(dat, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        (a_tg - b_tg), 
                        "assigning variable dat");
            current_statement_begin__ = 54;
            stan::math::assign(a_stg_tmp, ((alpha_sub * get_base1(real_data,((6 * Nplaces) + i),"real_data",1)) + (one_m_alpha_sub * get_base1(real_data,((4 * Nplaces) + i),"real_data",1))));
            current_statement_begin__ = 55;
            stan::math::assign(b_stg_tmp, ((alpha_sub * get_base1(real_data,((7 * Nplaces) + i),"real_data",1)) + (one_m_alpha_sub * get_base1(real_data,((5 * Nplaces) + i),"real_data",1))));
            current_statement_begin__ = 56;
            stan::math::assign(a_stg, inv(a_stg_tmp));
            current_statement_begin__ = 57;
            stan::math::assign(b_stg, inv(b_stg_tmp));
            current_statement_begin__ = 58;
            stan::model::assign(dat, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        (a_stg - b_stg), 
                        "assigning variable dat");
        }
        current_statement_begin__ = 63;
        stan::math::assign(p_a_logit, multiply(weights, dat));
        current_statement_begin__ = 65;
        stan::math::assign(lp, bernoulli_logit_log(stan::model::rvalue(int_data, stan::model::cons_list(stan::model::index_min_max(3, (Nvalid + 2)), stan::model::nil_index_list()), "int_data"), p_a_logit));
        current_statement_begin__ = 67;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(lp).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct goal_sub_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
             const std::vector<T2__>& real_data,
             const std::vector<int>& int_data, std::ostream* pstream__) const {
        return goal_sub(phi, theta, real_data, int_data, pstream__);
    }
};

class goal_hier_space_expt123_mpi_model : public prob_grad {
private:
        int Ntotal;
        int Nsubj;
        int Max_obs;
        std::vector<std::vector<double> > real_data;
        std::vector<std::vector<int> > int_data;
        std::vector<int> expt;
        std::vector<int> s_sg;
        std::vector<int> s_tg;
        int Nsubj_sg;
        int Nsubj_tg;
public:
    goal_hier_space_expt123_mpi_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    goal_hier_space_expt123_mpi_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "goal_hier_space_expt123_mpi_model_namespace::goal_hier_space_expt123_mpi_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "Ntotal", "int", context__.to_vec());
            Ntotal = int(0);
            vals_i__ = context__.vals_i("Ntotal");
            pos__ = 0;
            Ntotal = vals_i__[pos__++];
            check_greater_or_equal(function__, "Ntotal", Ntotal, 0);

            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "Nsubj", "int", context__.to_vec());
            Nsubj = int(0);
            vals_i__ = context__.vals_i("Nsubj");
            pos__ = 0;
            Nsubj = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nsubj", Nsubj, 0);

            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "Max_obs", "int", context__.to_vec());
            Max_obs = int(0);
            vals_i__ = context__.vals_i("Max_obs");
            pos__ = 0;
            Max_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "Max_obs", Max_obs, 0);

            current_statement_begin__ = 75;
            validate_non_negative_index("real_data", "Nsubj", Nsubj);
            validate_non_negative_index("real_data", "(Max_obs * 8)", (Max_obs * 8));
            context__.validate_dims("data initialization", "real_data", "double", context__.to_vec(Nsubj,(Max_obs * 8)));
            real_data = std::vector<std::vector<double> >(Nsubj, std::vector<double>((Max_obs * 8), double(0)));
            vals_r__ = context__.vals_r("real_data");
            pos__ = 0;
            size_t real_data_k_0_max__ = Nsubj;
            size_t real_data_k_1_max__ = (Max_obs * 8);
            for (size_t k_1__ = 0; k_1__ < real_data_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < real_data_k_0_max__; ++k_0__) {
                    real_data[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 76;
            validate_non_negative_index("int_data", "Nsubj", Nsubj);
            validate_non_negative_index("int_data", "(Max_obs + 2)", (Max_obs + 2));
            context__.validate_dims("data initialization", "int_data", "int", context__.to_vec(Nsubj,(Max_obs + 2)));
            int_data = std::vector<std::vector<int> >(Nsubj, std::vector<int>((Max_obs + 2), int(0)));
            vals_i__ = context__.vals_i("int_data");
            pos__ = 0;
            size_t int_data_k_0_max__ = Nsubj;
            size_t int_data_k_1_max__ = (Max_obs + 2);
            for (size_t k_1__ = 0; k_1__ < int_data_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < int_data_k_0_max__; ++k_0__) {
                    int_data[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 77;
            validate_non_negative_index("expt", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "expt", "int", context__.to_vec(Nsubj));
            expt = std::vector<int>(Nsubj, int(0));
            vals_i__ = context__.vals_i("expt");
            pos__ = 0;
            size_t expt_k_0_max__ = Nsubj;
            for (size_t k_0__ = 0; k_0__ < expt_k_0_max__; ++k_0__) {
                expt[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 78;
            validate_non_negative_index("s_sg", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "s_sg", "int", context__.to_vec(Nsubj));
            s_sg = std::vector<int>(Nsubj, int(0));
            vals_i__ = context__.vals_i("s_sg");
            pos__ = 0;
            size_t s_sg_k_0_max__ = Nsubj;
            for (size_t k_0__ = 0; k_0__ < s_sg_k_0_max__; ++k_0__) {
                s_sg[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 79;
            validate_non_negative_index("s_tg", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "s_tg", "int", context__.to_vec(Nsubj));
            s_tg = std::vector<int>(Nsubj, int(0));
            vals_i__ = context__.vals_i("s_tg");
            pos__ = 0;
            size_t s_tg_k_0_max__ = Nsubj;
            for (size_t k_0__ = 0; k_0__ < s_tg_k_0_max__; ++k_0__) {
                s_tg[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "Nsubj_sg", "int", context__.to_vec());
            Nsubj_sg = int(0);
            vals_i__ = context__.vals_i("Nsubj_sg");
            pos__ = 0;
            Nsubj_sg = vals_i__[pos__++];

            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "Nsubj_tg", "int", context__.to_vec());
            Nsubj_tg = int(0);
            vals_i__ = context__.vals_i("Nsubj_tg");
            pos__ = 0;
            Nsubj_tg = vals_i__[pos__++];


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 86;
            num_params_r__ += 1;
            current_statement_begin__ = 87;
            num_params_r__ += 1;
            current_statement_begin__ = 88;
            validate_non_negative_index("w1", "Nsubj_sg", Nsubj_sg);
            num_params_r__ += (1 * Nsubj_sg);
            current_statement_begin__ = 90;
            num_params_r__ += 1;
            current_statement_begin__ = 91;
            num_params_r__ += 1;
            current_statement_begin__ = 92;
            validate_non_negative_index("w2", "Nsubj_tg", Nsubj_tg);
            num_params_r__ += (1 * Nsubj_tg);
            current_statement_begin__ = 94;
            num_params_r__ += 1;
            current_statement_begin__ = 95;
            num_params_r__ += 1;
            current_statement_begin__ = 96;
            validate_non_negative_index("w3", "Nsubj", Nsubj);
            num_params_r__ += (1 * Nsubj);
            current_statement_begin__ = 98;
            num_params_r__ += 1;
            current_statement_begin__ = 99;
            num_params_r__ += 1;
            current_statement_begin__ = 100;
            validate_non_negative_index("delta", "Nsubj_sg", Nsubj_sg);
            num_params_r__ += (1 * Nsubj_sg);
            current_statement_begin__ = 102;
            num_params_r__ += 1;
            current_statement_begin__ = 103;
            num_params_r__ += 1;
            current_statement_begin__ = 104;
            validate_non_negative_index("tau", "Nsubj_tg", Nsubj_tg);
            num_params_r__ += (1 * Nsubj_tg);
            current_statement_begin__ = 106;
            num_params_r__ += 1;
            current_statement_begin__ = 107;
            num_params_r__ += 1;
            current_statement_begin__ = 108;
            validate_non_negative_index("alpha", "Nsubj", Nsubj);
            num_params_r__ += (1 * Nsubj);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~goal_hier_space_expt123_mpi_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 86;
        if (!(context__.contains_r("w1_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w1_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w1_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "w1_mean", "double", context__.to_vec());
        double w1_mean(0);
        w1_mean = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(w1_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w1_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 87;
        if (!(context__.contains_r("w1_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w1_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w1_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "w1_sd", "double", context__.to_vec());
        double w1_sd(0);
        w1_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, w1_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w1_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 88;
        if (!(context__.contains_r("w1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w1");
        pos__ = 0U;
        validate_non_negative_index("w1", "Nsubj_sg", Nsubj_sg);
        context__.validate_dims("parameter initialization", "w1", "double", context__.to_vec(Nsubj_sg));
        std::vector<double> w1(Nsubj_sg, double(0));
        size_t w1_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            w1[k_0__] = vals_r__[pos__++];
        }
        size_t w1_i_0_max__ = Nsubj_sg;
        for (size_t i_0__ = 0; i_0__ < w1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(w1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 90;
        if (!(context__.contains_r("w2_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w2_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w2_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "w2_mean", "double", context__.to_vec());
        double w2_mean(0);
        w2_mean = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, w2_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w2_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 91;
        if (!(context__.contains_r("w2_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w2_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w2_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "w2_sd", "double", context__.to_vec());
        double w2_sd(0);
        w2_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, w2_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w2_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 92;
        if (!(context__.contains_r("w2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w2");
        pos__ = 0U;
        validate_non_negative_index("w2", "Nsubj_tg", Nsubj_tg);
        context__.validate_dims("parameter initialization", "w2", "double", context__.to_vec(Nsubj_tg));
        std::vector<double> w2(Nsubj_tg, double(0));
        size_t w2_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            w2[k_0__] = vals_r__[pos__++];
        }
        size_t w2_i_0_max__ = Nsubj_tg;
        for (size_t i_0__ = 0; i_0__ < w2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_ub_unconstrain(0, w2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 94;
        if (!(context__.contains_r("w3_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w3_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w3_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "w3_mean", "double", context__.to_vec());
        double w3_mean(0);
        w3_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, w3_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w3_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 95;
        if (!(context__.contains_r("w3_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w3_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w3_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "w3_sd", "double", context__.to_vec());
        double w3_sd(0);
        w3_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, w3_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w3_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 96;
        if (!(context__.contains_r("w3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w3");
        pos__ = 0U;
        validate_non_negative_index("w3", "Nsubj", Nsubj);
        context__.validate_dims("parameter initialization", "w3", "double", context__.to_vec(Nsubj));
        std::vector<double> w3(Nsubj, double(0));
        size_t w3_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < w3_k_0_max__; ++k_0__) {
            w3[k_0__] = vals_r__[pos__++];
        }
        size_t w3_i_0_max__ = Nsubj;
        for (size_t i_0__ = 0; i_0__ < w3_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, w3[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w3: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 98;
        if (!(context__.contains_r("delta_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "delta_mean", "double", context__.to_vec());
        double delta_mean(0);
        delta_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, delta_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 99;
        if (!(context__.contains_r("delta_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "delta_sd", "double", context__.to_vec());
        double delta_sd(0);
        delta_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, delta_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 100;
        if (!(context__.contains_r("delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "Nsubj_sg", Nsubj_sg);
        context__.validate_dims("parameter initialization", "delta", "double", context__.to_vec(Nsubj_sg));
        std::vector<double> delta(Nsubj_sg, double(0));
        size_t delta_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            delta[k_0__] = vals_r__[pos__++];
        }
        size_t delta_i_0_max__ = Nsubj_sg;
        for (size_t i_0__ = 0; i_0__ < delta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, delta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 102;
        if (!(context__.contains_r("tau_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_mean", "double", context__.to_vec());
        double tau_mean(0);
        tau_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, tau_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 103;
        if (!(context__.contains_r("tau_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_sd", "double", context__.to_vec());
        double tau_sd(0);
        tau_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 104;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "Nsubj_tg", Nsubj_tg);
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec(Nsubj_tg));
        std::vector<double> tau(Nsubj_tg, double(0));
        size_t tau_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
            tau[k_0__] = vals_r__[pos__++];
        }
        size_t tau_i_0_max__ = Nsubj_tg;
        for (size_t i_0__ = 0; i_0__ < tau_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, tau[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 106;
        if (!(context__.contains_r("alpha_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_mean", "double", context__.to_vec());
        double alpha_mean(0);
        alpha_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.01, 0.99, alpha_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 107;
        if (!(context__.contains_r("alpha_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_sd", "double", context__.to_vec());
        double alpha_sd(0);
        alpha_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 108;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "Nsubj", Nsubj);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(Nsubj));
        std::vector<double> alpha(Nsubj, double(0));
        size_t alpha_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = Nsubj;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0.01, 0.99, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 86;
            local_scalar_t__ w1_mean;
            (void) w1_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                w1_mean = in__.scalar_constrain(lp__);
            else
                w1_mean = in__.scalar_constrain();

            current_statement_begin__ = 87;
            local_scalar_t__ w1_sd;
            (void) w1_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                w1_sd = in__.scalar_lb_constrain(0, lp__);
            else
                w1_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 88;
            std::vector<local_scalar_t__> w1;
            size_t w1_d_0_max__ = Nsubj_sg;
            w1.reserve(w1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < w1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    w1.push_back(in__.scalar_constrain(lp__));
                else
                    w1.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 90;
            local_scalar_t__ w2_mean;
            (void) w2_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                w2_mean = in__.scalar_ub_constrain(0, lp__);
            else
                w2_mean = in__.scalar_ub_constrain(0);

            current_statement_begin__ = 91;
            local_scalar_t__ w2_sd;
            (void) w2_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                w2_sd = in__.scalar_lb_constrain(0, lp__);
            else
                w2_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 92;
            std::vector<local_scalar_t__> w2;
            size_t w2_d_0_max__ = Nsubj_tg;
            w2.reserve(w2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < w2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    w2.push_back(in__.scalar_ub_constrain(0, lp__));
                else
                    w2.push_back(in__.scalar_ub_constrain(0));
            }

            current_statement_begin__ = 94;
            local_scalar_t__ w3_mean;
            (void) w3_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                w3_mean = in__.scalar_lb_constrain(0, lp__);
            else
                w3_mean = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 95;
            local_scalar_t__ w3_sd;
            (void) w3_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                w3_sd = in__.scalar_lb_constrain(0, lp__);
            else
                w3_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 96;
            std::vector<local_scalar_t__> w3;
            size_t w3_d_0_max__ = Nsubj;
            w3.reserve(w3_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < w3_d_0_max__; ++d_0__) {
                if (jacobian__)
                    w3.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    w3.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 98;
            local_scalar_t__ delta_mean;
            (void) delta_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_mean = in__.scalar_lub_constrain(0, 1, lp__);
            else
                delta_mean = in__.scalar_lub_constrain(0, 1);

            current_statement_begin__ = 99;
            local_scalar_t__ delta_sd;
            (void) delta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_sd = in__.scalar_lb_constrain(0, lp__);
            else
                delta_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 100;
            std::vector<local_scalar_t__> delta;
            size_t delta_d_0_max__ = Nsubj_sg;
            delta.reserve(delta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delta.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    delta.push_back(in__.scalar_lub_constrain(0, 1));
            }

            current_statement_begin__ = 102;
            local_scalar_t__ tau_mean;
            (void) tau_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_mean = in__.scalar_lub_constrain(0, 1, lp__);
            else
                tau_mean = in__.scalar_lub_constrain(0, 1);

            current_statement_begin__ = 103;
            local_scalar_t__ tau_sd;
            (void) tau_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_sd = in__.scalar_lb_constrain(0, lp__);
            else
                tau_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 104;
            std::vector<local_scalar_t__> tau;
            size_t tau_d_0_max__ = Nsubj_tg;
            tau.reserve(tau_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < tau_d_0_max__; ++d_0__) {
                if (jacobian__)
                    tau.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    tau.push_back(in__.scalar_lub_constrain(0, 1));
            }

            current_statement_begin__ = 106;
            local_scalar_t__ alpha_mean;
            (void) alpha_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_mean = in__.scalar_lub_constrain(0.01, 0.99, lp__);
            else
                alpha_mean = in__.scalar_lub_constrain(0.01, 0.99);

            current_statement_begin__ = 107;
            local_scalar_t__ alpha_sd;
            (void) alpha_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_sd = in__.scalar_lb_constrain(0, lp__);
            else
                alpha_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 108;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = Nsubj;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lub_constrain(0.01, 0.99, lp__));
                else
                    alpha.push_back(in__.scalar_lub_constrain(0.01, 0.99));
            }

            // transformed parameters
            current_statement_begin__ = 113;
            validate_non_negative_index("phi", "12", 12);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(12);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);

            current_statement_begin__ = 114;
            validate_non_negative_index("theta", "6", 6);
            validate_non_negative_index("theta", "Nsubj", Nsubj);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > theta(Nsubj, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(6));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 116;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        w1_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 117;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        w1_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 118;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        w2_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 119;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        w2_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 120;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        w3_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 121;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        w3_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 122;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                        delta_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 123;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                        delta_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 124;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                        tau_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 125;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                        tau_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 126;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list()), 
                        alpha_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 127;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list()), 
                        alpha_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 129;
            for (int subj = 1; subj <= Nsubj; ++subj) {

                current_statement_begin__ = 131;
                if (as_bool(logical_eq(get_base1(expt,subj,"expt",1), 1))) {

                    current_statement_begin__ = 132;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                get_base1(w1,get_base1(s_sg,subj,"s_sg",1),"w1",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 133;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 134;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(w3,subj,"w3",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 135;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                get_base1(delta,get_base1(s_sg,subj,"s_sg",1),"delta",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 136;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 137;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                                get_base1(alpha,subj,"alpha",1), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 140;
                if (as_bool(logical_eq(get_base1(expt,subj,"expt",1), 2))) {

                    current_statement_begin__ = 141;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 142;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                get_base1(w2,get_base1(s_tg,subj,"s_tg",1),"w2",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 143;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(w3,subj,"w3",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 144;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 145;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                get_base1(tau,get_base1(s_tg,subj,"s_tg",1),"tau",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 146;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                                get_base1(alpha,subj,"alpha",1), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 149;
                if (as_bool(logical_eq(get_base1(expt,subj,"expt",1), 3))) {

                    current_statement_begin__ = 150;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                get_base1(w1,get_base1(s_sg,subj,"s_sg",1),"w1",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 151;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                get_base1(w2,get_base1(s_tg,subj,"s_tg",1),"w2",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 152;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(w3,subj,"w3",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 153;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                get_base1(delta,get_base1(s_sg,subj,"s_sg",1),"delta",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 154;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                get_base1(tau,get_base1(s_tg,subj,"s_tg",1),"tau",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 155;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                                get_base1(alpha,subj,"alpha",1), 
                                "assigning variable theta");
                }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 113;
            size_t phi_j_1_max__ = 12;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(phi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: phi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 114;
            size_t theta_k_0_max__ = Nsubj;
            size_t theta_j_1_max__ = 6;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(theta[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body

            current_statement_begin__ = 163;
            lp_accum__.add(normal_log<propto__>(w1_mean, 0, 5));
            current_statement_begin__ = 164;
            lp_accum__.add(normal_log<propto__>(w1_sd, 0, 5));
            current_statement_begin__ = 165;
            lp_accum__.add(normal_log<propto__>(w2_mean, 0, 5));
            current_statement_begin__ = 166;
            lp_accum__.add(normal_log<propto__>(w2_sd, 0, 5));
            current_statement_begin__ = 167;
            lp_accum__.add(normal_log<propto__>(w3_mean, 0, 5));
            current_statement_begin__ = 168;
            lp_accum__.add(normal_log<propto__>(w3_sd, 0, 5));
            current_statement_begin__ = 171;
            lp_accum__.add(normal_log<propto__>(delta_sd, 0, 1));
            current_statement_begin__ = 172;
            lp_accum__.add(normal_log<propto__>(tau_sd, 0, 1));
            current_statement_begin__ = 173;
            lp_accum__.add(normal_log<propto__>(alpha_sd, 0, 1));
            current_statement_begin__ = 176;
            lp_accum__.add(normal_log<propto__>(w1, 0, 1));
            current_statement_begin__ = 177;
            lp_accum__.add(normal_log<propto__>(w2, 0, 1));
            current_statement_begin__ = 178;
            lp_accum__.add(normal_log<propto__>(w3, 0, 1));
            current_statement_begin__ = 182;
            for (int subj_sg = 1; subj_sg <= Nsubj_sg; ++subj_sg) {

                current_statement_begin__ = 183;
                lp_accum__.add(normal_log<propto__>(get_base1(delta,subj_sg,"delta",1), delta_mean, delta_sd));
                if (get_base1(delta,subj_sg,"delta",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(delta,subj_sg,"delta",1) > 1) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(1, delta_mean, delta_sd), normal_cdf_log(0, delta_mean, delta_sd)));
            }
            current_statement_begin__ = 185;
            for (int subj_tg = 1; subj_tg <= Nsubj_tg; ++subj_tg) {

                current_statement_begin__ = 186;
                lp_accum__.add(normal_log<propto__>(get_base1(tau,subj_tg,"tau",1), tau_mean, tau_sd));
                if (get_base1(tau,subj_tg,"tau",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(tau,subj_tg,"tau",1) > 1) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(1, tau_mean, tau_sd), normal_cdf_log(0, tau_mean, tau_sd)));
            }
            current_statement_begin__ = 190;
            for (int subj = 1; subj <= Nsubj; ++subj) {

                current_statement_begin__ = 191;
                lp_accum__.add(normal_log<propto__>(get_base1(alpha,subj,"alpha",1), alpha_mean, alpha_sd));
                if (get_base1(alpha,subj,"alpha",1) < 0.01) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(alpha,subj,"alpha",1) > 0.99) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(0.99, alpha_mean, alpha_sd), normal_cdf_log(0.01, alpha_mean, alpha_sd)));
            }
            current_statement_begin__ = 194;
            lp_accum__.add(sum(map_rect<1, goal_sub_functor__>(phi, theta, real_data, int_data, pstream__)));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("w1_mean");
        names__.push_back("w1_sd");
        names__.push_back("w1");
        names__.push_back("w2_mean");
        names__.push_back("w2_sd");
        names__.push_back("w2");
        names__.push_back("w3_mean");
        names__.push_back("w3_sd");
        names__.push_back("w3");
        names__.push_back("delta_mean");
        names__.push_back("delta_sd");
        names__.push_back("delta");
        names__.push_back("tau_mean");
        names__.push_back("tau_sd");
        names__.push_back("tau");
        names__.push_back("alpha_mean");
        names__.push_back("alpha_sd");
        names__.push_back("alpha");
        names__.push_back("phi");
        names__.push_back("theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj_sg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj_tg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj_sg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj_tg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj);
        dims__.push_back(6);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "goal_hier_space_expt123_mpi_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double w1_mean = in__.scalar_constrain();
        vars__.push_back(w1_mean);

        double w1_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(w1_sd);

        std::vector<double> w1;
        size_t w1_d_0_max__ = Nsubj_sg;
        w1.reserve(w1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < w1_d_0_max__; ++d_0__) {
            w1.push_back(in__.scalar_constrain());
        }
        size_t w1_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            vars__.push_back(w1[k_0__]);
        }

        double w2_mean = in__.scalar_ub_constrain(0);
        vars__.push_back(w2_mean);

        double w2_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(w2_sd);

        std::vector<double> w2;
        size_t w2_d_0_max__ = Nsubj_tg;
        w2.reserve(w2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < w2_d_0_max__; ++d_0__) {
            w2.push_back(in__.scalar_ub_constrain(0));
        }
        size_t w2_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            vars__.push_back(w2[k_0__]);
        }

        double w3_mean = in__.scalar_lb_constrain(0);
        vars__.push_back(w3_mean);

        double w3_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(w3_sd);

        std::vector<double> w3;
        size_t w3_d_0_max__ = Nsubj;
        w3.reserve(w3_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < w3_d_0_max__; ++d_0__) {
            w3.push_back(in__.scalar_lb_constrain(0));
        }
        size_t w3_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < w3_k_0_max__; ++k_0__) {
            vars__.push_back(w3[k_0__]);
        }

        double delta_mean = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(delta_mean);

        double delta_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(delta_sd);

        std::vector<double> delta;
        size_t delta_d_0_max__ = Nsubj_sg;
        delta.reserve(delta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
            delta.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t delta_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            vars__.push_back(delta[k_0__]);
        }

        double tau_mean = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(tau_mean);

        double tau_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_sd);

        std::vector<double> tau;
        size_t tau_d_0_max__ = Nsubj_tg;
        tau.reserve(tau_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < tau_d_0_max__; ++d_0__) {
            tau.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t tau_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }

        double alpha_mean = in__.scalar_lub_constrain(0.01, 0.99);
        vars__.push_back(alpha_mean);

        double alpha_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha_sd);

        std::vector<double> alpha;
        size_t alpha_d_0_max__ = Nsubj;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lub_constrain(0.01, 0.99));
        }
        size_t alpha_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 113;
            validate_non_negative_index("phi", "12", 12);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phi(12);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);

            current_statement_begin__ = 114;
            validate_non_negative_index("theta", "6", 6);
            validate_non_negative_index("theta", "Nsubj", Nsubj);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > theta(Nsubj, Eigen::Matrix<double, Eigen::Dynamic, 1>(6));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 116;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        w1_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 117;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        w1_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 118;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        w2_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 119;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        w2_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 120;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        w3_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 121;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        w3_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 122;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                        delta_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 123;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                        delta_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 124;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                        tau_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 125;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                        tau_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 126;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list()), 
                        alpha_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 127;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list()), 
                        alpha_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 129;
            for (int subj = 1; subj <= Nsubj; ++subj) {

                current_statement_begin__ = 131;
                if (as_bool(logical_eq(get_base1(expt,subj,"expt",1), 1))) {

                    current_statement_begin__ = 132;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                get_base1(w1,get_base1(s_sg,subj,"s_sg",1),"w1",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 133;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 134;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(w3,subj,"w3",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 135;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                get_base1(delta,get_base1(s_sg,subj,"s_sg",1),"delta",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 136;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 137;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                                get_base1(alpha,subj,"alpha",1), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 140;
                if (as_bool(logical_eq(get_base1(expt,subj,"expt",1), 2))) {

                    current_statement_begin__ = 141;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 142;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                get_base1(w2,get_base1(s_tg,subj,"s_tg",1),"w2",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 143;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(w3,subj,"w3",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 144;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable theta");
                    current_statement_begin__ = 145;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                get_base1(tau,get_base1(s_tg,subj,"s_tg",1),"tau",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 146;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                                get_base1(alpha,subj,"alpha",1), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 149;
                if (as_bool(logical_eq(get_base1(expt,subj,"expt",1), 3))) {

                    current_statement_begin__ = 150;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                get_base1(w1,get_base1(s_sg,subj,"s_sg",1),"w1",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 151;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                get_base1(w2,get_base1(s_tg,subj,"s_tg",1),"w2",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 152;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(w3,subj,"w3",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 153;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                get_base1(delta,get_base1(s_sg,subj,"s_sg",1),"delta",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 154;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                get_base1(tau,get_base1(s_tg,subj,"s_tg",1),"tau",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 155;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                                get_base1(alpha,subj,"alpha",1), 
                                "assigning variable theta");
                }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t phi_j_1_max__ = 12;
                for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                    vars__.push_back(phi(j_1__));
                }
                size_t theta_j_1_max__ = 6;
                size_t theta_k_0_max__ = Nsubj;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                        vars__.push_back(theta[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "goal_hier_space_expt123_mpi_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t w1_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t w2_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "w3_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w3_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t w3_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < w3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t delta_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t tau_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t phi_j_1_max__ = 12;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = 6;
            size_t theta_k_0_max__ = Nsubj;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t w1_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t w2_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "w3_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w3_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t w3_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < w3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t delta_k_0_max__ = Nsubj_sg;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t tau_k_0_max__ = Nsubj_tg;
        for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_k_0_max__ = Nsubj;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t phi_j_1_max__ = 12;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = 6;
            size_t theta_k_0_max__ = Nsubj;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef goal_hier_space_expt123_mpi_model_namespace::goal_hier_space_expt123_mpi_model stan_model;

STAN_REGISTER_MAP_RECT(1, goal_hier_space_expt123_mpi_model_namespace::goal_sub_functor__)
