// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace goal_hier_nospace_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model/goal_hier_nospace.stan");
    reader.add_event(187, 187, "end", "model/goal_hier_nospace.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T13__, T14__, T15__, T16__, typename boost::math::tools::promote_args<T17__, T18__, T19__, T20__>::type>::type>::type>::type, 1,Eigen::Dynamic>
goal_sub(const T0__& w1_mean,
             const T1__& w1_sd,
             const std::vector<T2__>& w1,
             const T3__& w2_mean,
             const T4__& w2_sd,
             const std::vector<T5__>& w2,
             const std::vector<T6__>& delta,
             const std::vector<T7__>& tau,
             const std::vector<int>& Nobs,
             const int& subj,
             const std::vector<int>& expt,
             const std::vector<int>& s1,
             const std::vector<int>& s2,
             const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& a_logd,
             const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& b_logd,
             const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& a_logt,
             const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& b_logt,
             const Eigen::Matrix<T17__, Eigen::Dynamic,Eigen::Dynamic>& a_dot,
             const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& b_dot,
             const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& a_tod,
             const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& b_tod, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T13__, T14__, T15__, T16__, typename boost::math::tools::promote_args<T17__, T18__, T19__, T20__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        local_scalar_t__ delta_sub;
        (void) delta_sub;  // dummy to suppress unused var warning

        stan::math::initialize(delta_sub, DUMMY_VAR__);
        stan::math::fill(delta_sub,DUMMY_VAR__);
        current_statement_begin__ = 31;
        local_scalar_t__ tau_sub;
        (void) tau_sub;  // dummy to suppress unused var warning

        stan::math::initialize(tau_sub, DUMMY_VAR__);
        stan::math::fill(tau_sub,DUMMY_VAR__);
        current_statement_begin__ = 34;
        local_scalar_t__ a_sg;
        (void) a_sg;  // dummy to suppress unused var warning

        stan::math::initialize(a_sg, DUMMY_VAR__);
        stan::math::fill(a_sg,DUMMY_VAR__);
        current_statement_begin__ = 35;
        local_scalar_t__ b_sg;
        (void) b_sg;  // dummy to suppress unused var warning

        stan::math::initialize(b_sg, DUMMY_VAR__);
        stan::math::fill(b_sg,DUMMY_VAR__);
        current_statement_begin__ = 36;
        local_scalar_t__ a_tg;
        (void) a_tg;  // dummy to suppress unused var warning

        stan::math::initialize(a_tg, DUMMY_VAR__);
        stan::math::fill(a_tg,DUMMY_VAR__);
        current_statement_begin__ = 37;
        local_scalar_t__ b_tg;
        (void) b_tg;  // dummy to suppress unused var warning

        stan::math::initialize(b_tg, DUMMY_VAR__);
        stan::math::fill(b_tg,DUMMY_VAR__);
        current_statement_begin__ = 44;
        validate_non_negative_index("dat", "1", 1);
        validate_non_negative_index("dat", "get_base1(Nobs,subj,\"Nobs\",1)", get_base1(Nobs,subj,"Nobs",1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  dat(static_cast<Eigen::VectorXd::Index>(1),static_cast<Eigen::VectorXd::Index>(get_base1(Nobs,subj,"Nobs",1)));
        (void) dat;  // dummy to suppress unused var warning

        stan::math::initialize(dat, DUMMY_VAR__);
        stan::math::fill(dat,DUMMY_VAR__);
        current_statement_begin__ = 45;
        validate_non_negative_index("weights", "1", 1);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  weights(static_cast<Eigen::VectorXd::Index>(1));
        (void) weights;  // dummy to suppress unused var warning

        stan::math::initialize(weights, DUMMY_VAR__);
        stan::math::fill(weights,DUMMY_VAR__);
        current_statement_begin__ = 46;
        validate_non_negative_index("p_a_logit", "get_base1(Nobs,subj,\"Nobs\",1)", get_base1(Nobs,subj,"Nobs",1));
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  p_a_logit(static_cast<Eigen::VectorXd::Index>(get_base1(Nobs,subj,"Nobs",1)));
        (void) p_a_logit;  // dummy to suppress unused var warning

        stan::math::initialize(p_a_logit, DUMMY_VAR__);
        stan::math::fill(p_a_logit,DUMMY_VAR__);
        current_statement_begin__ = 47;
        validate_non_negative_index("y_sub", "get_base1(Nobs,subj,\"Nobs\",1)", get_base1(Nobs,subj,"Nobs",1));
        vector<int> y_sub(get_base1(Nobs,subj,"Nobs",1), 0);
        stan::math::fill(y_sub, std::numeric_limits<int>::min());


        current_statement_begin__ = 51;
        if (as_bool(logical_eq(get_base1(expt,subj,"expt",1),1))) {

            current_statement_begin__ = 52;
            stan::math::assign(get_base1_lhs(weights,1,"weights",1), (w1_mean + (get_base1(w1,get_base1(s1,subj,"s1",1),"w1",1) * w1_sd)));
            current_statement_begin__ = 53;
            stan::math::assign(delta_sub, get_base1(delta,get_base1(s1,subj,"s1",1),"delta",1));
            current_statement_begin__ = 54;
            for (int obs = 1; obs <= get_base1(Nobs,subj,"Nobs",1); ++obs) {

                current_statement_begin__ = 55;
                stan::math::assign(a_sg, stan::math::exp((get_base1(a_logd,obs,subj,"a_logd",1) * delta_sub)));
                current_statement_begin__ = 56;
                stan::math::assign(b_sg, stan::math::exp((get_base1(b_logd,obs,subj,"b_logd",1) * delta_sub)));
                current_statement_begin__ = 57;
                stan::math::assign(get_base1_lhs(dat,1,obs,"dat",1), (a_sg - b_sg));
            }
        }
        current_statement_begin__ = 61;
        if (as_bool(logical_eq(get_base1(expt,subj,"expt",1),2))) {

            current_statement_begin__ = 62;
            stan::math::assign(get_base1_lhs(weights,1,"weights",1), (w2_mean + (get_base1(w2,get_base1(s2,subj,"s2",1),"w2",1) * w2_sd)));
            current_statement_begin__ = 63;
            stan::math::assign(tau_sub, get_base1(tau,get_base1(s2,subj,"s2",1),"tau",1));
            current_statement_begin__ = 64;
            for (int obs = 1; obs <= get_base1(Nobs,subj,"Nobs",1); ++obs) {

                current_statement_begin__ = 65;
                stan::math::assign(a_tg, stan::math::exp((get_base1(a_logt,obs,subj,"a_logt",1) * tau_sub)));
                current_statement_begin__ = 66;
                stan::math::assign(b_tg, stan::math::exp((get_base1(b_logt,obs,subj,"b_logt",1) * tau_sub)));
                current_statement_begin__ = 67;
                stan::math::assign(get_base1_lhs(dat,1,obs,"dat",1), (a_tg - b_tg));
            }
        }
        current_statement_begin__ = 83;
        stan::math::assign(p_a_logit, multiply(weights,dat));
        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>(p_a_logit);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct goal_sub_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T13__, T14__, T15__, T16__, typename boost::math::tools::promote_args<T17__, T18__, T19__, T20__>::type>::type>::type>::type, 1,Eigen::Dynamic>
    operator()(const T0__& w1_mean,
             const T1__& w1_sd,
             const std::vector<T2__>& w1,
             const T3__& w2_mean,
             const T4__& w2_sd,
             const std::vector<T5__>& w2,
             const std::vector<T6__>& delta,
             const std::vector<T7__>& tau,
             const std::vector<int>& Nobs,
             const int& subj,
             const std::vector<int>& expt,
             const std::vector<int>& s1,
             const std::vector<int>& s2,
             const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& a_logd,
             const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& b_logd,
             const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& a_logt,
             const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& b_logt,
             const Eigen::Matrix<T17__, Eigen::Dynamic,Eigen::Dynamic>& a_dot,
             const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& b_dot,
             const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& a_tod,
             const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& b_tod, std::ostream* pstream__) const {
        return goal_sub(w1_mean, w1_sd, w1, w2_mean, w2_sd, w2, delta, tau, Nobs, subj, expt, s1, s2, a_logd, b_logd, a_logt, b_logt, a_dot, b_dot, a_tod, b_tod, pstream__);
    }
};

class goal_hier_nospace_model : public prob_grad {
private:
    int Ntotal;
    int Nsubj;
    int Maxobs;
    vector<int> Nobs;
    vector<int> s;
    vector<vector<int> > y;
    matrix_d a_logd;
    matrix_d b_logd;
    matrix_d a_logt;
    matrix_d b_logt;
    matrix_d a_dot;
    matrix_d b_dot;
    matrix_d a_tod;
    matrix_d b_tod;
    vector<int> expt;
    vector<int> s1;
    vector<int> s2;
    int Nsubj1;
    int Nsubj2;
public:
    goal_hier_nospace_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    goal_hier_nospace_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "goal_hier_nospace_model_namespace::goal_hier_nospace_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "Ntotal", "int", context__.to_vec());
            Ntotal = int(0);
            vals_i__ = context__.vals_i("Ntotal");
            pos__ = 0;
            Ntotal = vals_i__[pos__++];
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "Nsubj", "int", context__.to_vec());
            Nsubj = int(0);
            vals_i__ = context__.vals_i("Nsubj");
            pos__ = 0;
            Nsubj = vals_i__[pos__++];
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "Maxobs", "int", context__.to_vec());
            Maxobs = int(0);
            vals_i__ = context__.vals_i("Maxobs");
            pos__ = 0;
            Maxobs = vals_i__[pos__++];
            current_statement_begin__ = 92;
            validate_non_negative_index("Nobs", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "Nobs", "int", context__.to_vec(Nsubj));
            validate_non_negative_index("Nobs", "Nsubj", Nsubj);
            Nobs = std::vector<int>(Nsubj,int(0));
            vals_i__ = context__.vals_i("Nobs");
            pos__ = 0;
            size_t Nobs_limit_0__ = Nsubj;
            for (size_t i_0__ = 0; i_0__ < Nobs_limit_0__; ++i_0__) {
                Nobs[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 93;
            validate_non_negative_index("s", "Ntotal", Ntotal);
            context__.validate_dims("data initialization", "s", "int", context__.to_vec(Ntotal));
            validate_non_negative_index("s", "Ntotal", Ntotal);
            s = std::vector<int>(Ntotal,int(0));
            vals_i__ = context__.vals_i("s");
            pos__ = 0;
            size_t s_limit_0__ = Ntotal;
            for (size_t i_0__ = 0; i_0__ < s_limit_0__; ++i_0__) {
                s[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 94;
            validate_non_negative_index("y", "Maxobs", Maxobs);
            validate_non_negative_index("y", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("y", "Maxobs", Maxobs);
            validate_non_negative_index("y", "Nsubj", Nsubj);
            y = std::vector<std::vector<int> >(Maxobs,std::vector<int>(Nsubj,int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_1__ = Nsubj;
            for (size_t i_1__ = 0; i_1__ < y_limit_1__; ++i_1__) {
                size_t y_limit_0__ = Maxobs;
                for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                    y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 95;
            validate_non_negative_index("a_logd", "Maxobs", Maxobs);
            validate_non_negative_index("a_logd", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "a_logd", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("a_logd", "Maxobs", Maxobs);
            validate_non_negative_index("a_logd", "Nsubj", Nsubj);
            a_logd = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("a_logd");
            pos__ = 0;
            size_t a_logd_m_mat_lim__ = Maxobs;
            size_t a_logd_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < a_logd_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < a_logd_m_mat_lim__; ++m_mat__) {
                    a_logd(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 96;
            validate_non_negative_index("b_logd", "Maxobs", Maxobs);
            validate_non_negative_index("b_logd", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "b_logd", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("b_logd", "Maxobs", Maxobs);
            validate_non_negative_index("b_logd", "Nsubj", Nsubj);
            b_logd = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("b_logd");
            pos__ = 0;
            size_t b_logd_m_mat_lim__ = Maxobs;
            size_t b_logd_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < b_logd_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < b_logd_m_mat_lim__; ++m_mat__) {
                    b_logd(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 97;
            validate_non_negative_index("a_logt", "Maxobs", Maxobs);
            validate_non_negative_index("a_logt", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "a_logt", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("a_logt", "Maxobs", Maxobs);
            validate_non_negative_index("a_logt", "Nsubj", Nsubj);
            a_logt = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("a_logt");
            pos__ = 0;
            size_t a_logt_m_mat_lim__ = Maxobs;
            size_t a_logt_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < a_logt_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < a_logt_m_mat_lim__; ++m_mat__) {
                    a_logt(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 98;
            validate_non_negative_index("b_logt", "Maxobs", Maxobs);
            validate_non_negative_index("b_logt", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "b_logt", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("b_logt", "Maxobs", Maxobs);
            validate_non_negative_index("b_logt", "Nsubj", Nsubj);
            b_logt = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("b_logt");
            pos__ = 0;
            size_t b_logt_m_mat_lim__ = Maxobs;
            size_t b_logt_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < b_logt_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < b_logt_m_mat_lim__; ++m_mat__) {
                    b_logt(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 99;
            validate_non_negative_index("a_dot", "Maxobs", Maxobs);
            validate_non_negative_index("a_dot", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "a_dot", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("a_dot", "Maxobs", Maxobs);
            validate_non_negative_index("a_dot", "Nsubj", Nsubj);
            a_dot = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("a_dot");
            pos__ = 0;
            size_t a_dot_m_mat_lim__ = Maxobs;
            size_t a_dot_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < a_dot_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < a_dot_m_mat_lim__; ++m_mat__) {
                    a_dot(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 100;
            validate_non_negative_index("b_dot", "Maxobs", Maxobs);
            validate_non_negative_index("b_dot", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "b_dot", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("b_dot", "Maxobs", Maxobs);
            validate_non_negative_index("b_dot", "Nsubj", Nsubj);
            b_dot = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("b_dot");
            pos__ = 0;
            size_t b_dot_m_mat_lim__ = Maxobs;
            size_t b_dot_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < b_dot_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < b_dot_m_mat_lim__; ++m_mat__) {
                    b_dot(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 101;
            validate_non_negative_index("a_tod", "Maxobs", Maxobs);
            validate_non_negative_index("a_tod", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "a_tod", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("a_tod", "Maxobs", Maxobs);
            validate_non_negative_index("a_tod", "Nsubj", Nsubj);
            a_tod = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("a_tod");
            pos__ = 0;
            size_t a_tod_m_mat_lim__ = Maxobs;
            size_t a_tod_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < a_tod_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < a_tod_m_mat_lim__; ++m_mat__) {
                    a_tod(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("b_tod", "Maxobs", Maxobs);
            validate_non_negative_index("b_tod", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "b_tod", "matrix_d", context__.to_vec(Maxobs,Nsubj));
            validate_non_negative_index("b_tod", "Maxobs", Maxobs);
            validate_non_negative_index("b_tod", "Nsubj", Nsubj);
            b_tod = matrix_d(static_cast<Eigen::VectorXd::Index>(Maxobs),static_cast<Eigen::VectorXd::Index>(Nsubj));
            vals_r__ = context__.vals_r("b_tod");
            pos__ = 0;
            size_t b_tod_m_mat_lim__ = Maxobs;
            size_t b_tod_n_mat_lim__ = Nsubj;
            for (size_t n_mat__ = 0; n_mat__ < b_tod_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < b_tod_m_mat_lim__; ++m_mat__) {
                    b_tod(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 103;
            validate_non_negative_index("expt", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "expt", "int", context__.to_vec(Nsubj));
            validate_non_negative_index("expt", "Nsubj", Nsubj);
            expt = std::vector<int>(Nsubj,int(0));
            vals_i__ = context__.vals_i("expt");
            pos__ = 0;
            size_t expt_limit_0__ = Nsubj;
            for (size_t i_0__ = 0; i_0__ < expt_limit_0__; ++i_0__) {
                expt[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 104;
            validate_non_negative_index("s1", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "s1", "int", context__.to_vec(Nsubj));
            validate_non_negative_index("s1", "Nsubj", Nsubj);
            s1 = std::vector<int>(Nsubj,int(0));
            vals_i__ = context__.vals_i("s1");
            pos__ = 0;
            size_t s1_limit_0__ = Nsubj;
            for (size_t i_0__ = 0; i_0__ < s1_limit_0__; ++i_0__) {
                s1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 105;
            validate_non_negative_index("s2", "Nsubj", Nsubj);
            context__.validate_dims("data initialization", "s2", "int", context__.to_vec(Nsubj));
            validate_non_negative_index("s2", "Nsubj", Nsubj);
            s2 = std::vector<int>(Nsubj,int(0));
            vals_i__ = context__.vals_i("s2");
            pos__ = 0;
            size_t s2_limit_0__ = Nsubj;
            for (size_t i_0__ = 0; i_0__ < s2_limit_0__; ++i_0__) {
                s2[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 106;
            context__.validate_dims("data initialization", "Nsubj1", "int", context__.to_vec());
            Nsubj1 = int(0);
            vals_i__ = context__.vals_i("Nsubj1");
            pos__ = 0;
            Nsubj1 = vals_i__[pos__++];
            current_statement_begin__ = 107;
            context__.validate_dims("data initialization", "Nsubj2", "int", context__.to_vec());
            Nsubj2 = int(0);
            vals_i__ = context__.vals_i("Nsubj2");
            pos__ = 0;
            Nsubj2 = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 89;
            check_greater_or_equal(function__,"Ntotal",Ntotal,0);
            current_statement_begin__ = 90;
            check_greater_or_equal(function__,"Nsubj",Nsubj,0);
            current_statement_begin__ = 91;
            check_greater_or_equal(function__,"Maxobs",Maxobs,0);
            current_statement_begin__ = 92;
            for (int k0__ = 0; k0__ < Nsubj; ++k0__) {
                check_greater_or_equal(function__,"Nobs[k0__]",Nobs[k0__],0);
            }
            current_statement_begin__ = 93;
            for (int k0__ = 0; k0__ < Ntotal; ++k0__) {
                check_greater_or_equal(function__,"s[k0__]",s[k0__],0);
            }
            current_statement_begin__ = 94;
            for (int k0__ = 0; k0__ < Maxobs; ++k0__) {
                for (int k1__ = 0; k1__ < Nsubj; ++k1__) {
                    check_greater_or_equal(function__,"y[k0__][k1__]",y[k0__][k1__],0);
                    check_less_or_equal(function__,"y[k0__][k1__]",y[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 95;
            current_statement_begin__ = 96;
            current_statement_begin__ = 97;
            current_statement_begin__ = 98;
            current_statement_begin__ = 99;
            current_statement_begin__ = 100;
            current_statement_begin__ = 101;
            current_statement_begin__ = 102;
            current_statement_begin__ = 103;
            current_statement_begin__ = 104;
            current_statement_begin__ = 105;
            current_statement_begin__ = 106;
            current_statement_begin__ = 107;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 112;
            ++num_params_r__;
            current_statement_begin__ = 113;
            ++num_params_r__;
            current_statement_begin__ = 114;
            validate_non_negative_index("w1", "Nsubj1", Nsubj1);
            num_params_r__ += Nsubj1;
            current_statement_begin__ = 116;
            ++num_params_r__;
            current_statement_begin__ = 117;
            ++num_params_r__;
            current_statement_begin__ = 118;
            validate_non_negative_index("w2", "Nsubj2", Nsubj2);
            num_params_r__ += Nsubj2;
            current_statement_begin__ = 124;
            ++num_params_r__;
            current_statement_begin__ = 125;
            ++num_params_r__;
            current_statement_begin__ = 126;
            validate_non_negative_index("delta", "Nsubj1", Nsubj1);
            num_params_r__ += Nsubj1;
            current_statement_begin__ = 128;
            ++num_params_r__;
            current_statement_begin__ = 129;
            ++num_params_r__;
            current_statement_begin__ = 130;
            validate_non_negative_index("tau", "Nsubj2", Nsubj2);
            num_params_r__ += Nsubj2;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~goal_hier_nospace_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("w1_mean")))
            throw std::runtime_error("variable w1_mean missing");
        vals_r__ = context__.vals_r("w1_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "w1_mean", "double", context__.to_vec());
        double w1_mean(0);
        w1_mean = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(w1_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w1_mean: ") + e.what());
        }

        if (!(context__.contains_r("w1_sd")))
            throw std::runtime_error("variable w1_sd missing");
        vals_r__ = context__.vals_r("w1_sd");
        pos__ = 0U;
        context__.validate_dims("initialization", "w1_sd", "double", context__.to_vec());
        double w1_sd(0);
        w1_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,w1_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w1_sd: ") + e.what());
        }

        if (!(context__.contains_r("w1")))
            throw std::runtime_error("variable w1 missing");
        vals_r__ = context__.vals_r("w1");
        pos__ = 0U;
        validate_non_negative_index("w1", "Nsubj1", Nsubj1);
        context__.validate_dims("initialization", "w1", "double", context__.to_vec(Nsubj1));
        std::vector<double> w1(Nsubj1,double(0));
        for (int i0__ = 0U; i0__ < Nsubj1; ++i0__)
            w1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < Nsubj1; ++i0__)
            try {
            writer__.scalar_unconstrain(w1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w1: ") + e.what());
        }

        if (!(context__.contains_r("w2_mean")))
            throw std::runtime_error("variable w2_mean missing");
        vals_r__ = context__.vals_r("w2_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "w2_mean", "double", context__.to_vec());
        double w2_mean(0);
        w2_mean = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0,w2_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w2_mean: ") + e.what());
        }

        if (!(context__.contains_r("w2_sd")))
            throw std::runtime_error("variable w2_sd missing");
        vals_r__ = context__.vals_r("w2_sd");
        pos__ = 0U;
        context__.validate_dims("initialization", "w2_sd", "double", context__.to_vec());
        double w2_sd(0);
        w2_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,w2_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w2_sd: ") + e.what());
        }

        if (!(context__.contains_r("w2")))
            throw std::runtime_error("variable w2 missing");
        vals_r__ = context__.vals_r("w2");
        pos__ = 0U;
        validate_non_negative_index("w2", "Nsubj2", Nsubj2);
        context__.validate_dims("initialization", "w2", "double", context__.to_vec(Nsubj2));
        std::vector<double> w2(Nsubj2,double(0));
        for (int i0__ = 0U; i0__ < Nsubj2; ++i0__)
            w2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < Nsubj2; ++i0__)
            try {
            writer__.scalar_ub_unconstrain(0,w2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w2: ") + e.what());
        }

        if (!(context__.contains_r("delta_mean")))
            throw std::runtime_error("variable delta_mean missing");
        vals_r__ = context__.vals_r("delta_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_mean", "double", context__.to_vec());
        double delta_mean(0);
        delta_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,delta_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_mean: ") + e.what());
        }

        if (!(context__.contains_r("delta_sd")))
            throw std::runtime_error("variable delta_sd missing");
        vals_r__ = context__.vals_r("delta_sd");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_sd", "double", context__.to_vec());
        double delta_sd(0);
        delta_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,delta_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_sd: ") + e.what());
        }

        if (!(context__.contains_r("delta")))
            throw std::runtime_error("variable delta missing");
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "Nsubj1", Nsubj1);
        context__.validate_dims("initialization", "delta", "double", context__.to_vec(Nsubj1));
        std::vector<double> delta(Nsubj1,double(0));
        for (int i0__ = 0U; i0__ < Nsubj1; ++i0__)
            delta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < Nsubj1; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,delta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta: ") + e.what());
        }

        if (!(context__.contains_r("tau_mean")))
            throw std::runtime_error("variable tau_mean missing");
        vals_r__ = context__.vals_r("tau_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_mean", "double", context__.to_vec());
        double tau_mean(0);
        tau_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,tau_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_mean: ") + e.what());
        }

        if (!(context__.contains_r("tau_sd")))
            throw std::runtime_error("variable tau_sd missing");
        vals_r__ = context__.vals_r("tau_sd");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_sd", "double", context__.to_vec());
        double tau_sd(0);
        tau_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_sd: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "Nsubj2", Nsubj2);
        context__.validate_dims("initialization", "tau", "double", context__.to_vec(Nsubj2));
        std::vector<double> tau(Nsubj2,double(0));
        for (int i0__ = 0U; i0__ < Nsubj2; ++i0__)
            tau[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < Nsubj2; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,tau[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ w1_mean;
            (void) w1_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                w1_mean = in__.scalar_constrain(lp__);
            else
                w1_mean = in__.scalar_constrain();

            local_scalar_t__ w1_sd;
            (void) w1_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                w1_sd = in__.scalar_lb_constrain(0,lp__);
            else
                w1_sd = in__.scalar_lb_constrain(0);

            vector<local_scalar_t__> w1;
            size_t dim_w1_0__ = Nsubj1;
            w1.reserve(dim_w1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_w1_0__; ++k_0__) {
                if (jacobian__)
                    w1.push_back(in__.scalar_constrain(lp__));
                else
                    w1.push_back(in__.scalar_constrain());
            }

            local_scalar_t__ w2_mean;
            (void) w2_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                w2_mean = in__.scalar_ub_constrain(0,lp__);
            else
                w2_mean = in__.scalar_ub_constrain(0);

            local_scalar_t__ w2_sd;
            (void) w2_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                w2_sd = in__.scalar_lb_constrain(0,lp__);
            else
                w2_sd = in__.scalar_lb_constrain(0);

            vector<local_scalar_t__> w2;
            size_t dim_w2_0__ = Nsubj2;
            w2.reserve(dim_w2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_w2_0__; ++k_0__) {
                if (jacobian__)
                    w2.push_back(in__.scalar_ub_constrain(0,lp__));
                else
                    w2.push_back(in__.scalar_ub_constrain(0));
            }

            local_scalar_t__ delta_mean;
            (void) delta_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_mean = in__.scalar_lub_constrain(0,1,lp__);
            else
                delta_mean = in__.scalar_lub_constrain(0,1);

            local_scalar_t__ delta_sd;
            (void) delta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_sd = in__.scalar_lb_constrain(0,lp__);
            else
                delta_sd = in__.scalar_lb_constrain(0);

            vector<local_scalar_t__> delta;
            size_t dim_delta_0__ = Nsubj1;
            delta.reserve(dim_delta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_delta_0__; ++k_0__) {
                if (jacobian__)
                    delta.push_back(in__.scalar_lub_constrain(0,1,lp__));
                else
                    delta.push_back(in__.scalar_lub_constrain(0,1));
            }

            local_scalar_t__ tau_mean;
            (void) tau_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_mean = in__.scalar_lub_constrain(0,1,lp__);
            else
                tau_mean = in__.scalar_lub_constrain(0,1);

            local_scalar_t__ tau_sd;
            (void) tau_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_sd = in__.scalar_lb_constrain(0,lp__);
            else
                tau_sd = in__.scalar_lb_constrain(0);

            vector<local_scalar_t__> tau;
            size_t dim_tau_0__ = Nsubj2;
            tau.reserve(dim_tau_0__);
            for (size_t k_0__ = 0; k_0__ < dim_tau_0__; ++k_0__) {
                if (jacobian__)
                    tau.push_back(in__.scalar_lub_constrain(0,1,lp__));
                else
                    tau.push_back(in__.scalar_lub_constrain(0,1));
            }


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 141;
            lp_accum__.add(normal_log<propto__>(w1_mean, 0, 5));
            current_statement_begin__ = 142;
            lp_accum__.add(normal_log<propto__>(w1_sd, 0, 1));
            current_statement_begin__ = 143;
            lp_accum__.add(normal_log<propto__>(w2_mean, 0, 5));
            current_statement_begin__ = 144;
            lp_accum__.add(normal_log<propto__>(w2_sd, 0, 1));
            current_statement_begin__ = 149;
            lp_accum__.add(normal_log<propto__>(delta_sd, 0, 1));
            current_statement_begin__ = 150;
            lp_accum__.add(normal_log<propto__>(tau_sd, 0, 1));
            current_statement_begin__ = 154;
            lp_accum__.add(normal_log<propto__>(w1, 0, 1));
            current_statement_begin__ = 155;
            lp_accum__.add(normal_log<propto__>(w2, 0, 1));
            current_statement_begin__ = 160;
            for (int subj1 = 1; subj1 <= Nsubj1; ++subj1) {

                current_statement_begin__ = 161;
                lp_accum__.add(normal_log<propto__>(get_base1(delta,subj1,"delta",1), delta_mean, delta_sd));
                if (get_base1(delta,subj1,"delta",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(delta,subj1,"delta",1) > 1) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(1, delta_mean, delta_sd), normal_cdf_log(0, delta_mean, delta_sd)));
            }
            current_statement_begin__ = 163;
            for (int subj2 = 1; subj2 <= Nsubj2; ++subj2) {

                current_statement_begin__ = 164;
                lp_accum__.add(normal_log<propto__>(get_base1(tau,subj2,"tau",1), tau_mean, tau_sd));
                if (get_base1(tau,subj2,"tau",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(tau,subj2,"tau",1) > 1) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(1, tau_mean, tau_sd), normal_cdf_log(0, tau_mean, tau_sd)));
            }
            current_statement_begin__ = 168;
            for (int subj = 1; subj <= Nsubj; ++subj) {
                {
                current_statement_begin__ = 169;
                validate_non_negative_index("p_a_logit", "get_base1(Nobs,subj,\"Nobs\",1)", get_base1(Nobs,subj,"Nobs",1));
                Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  p_a_logit(static_cast<Eigen::VectorXd::Index>(get_base1(Nobs,subj,"Nobs",1)));
                (void) p_a_logit;  // dummy to suppress unused var warning

                stan::math::initialize(p_a_logit, DUMMY_VAR__);
                stan::math::fill(p_a_logit,DUMMY_VAR__);


                current_statement_begin__ = 173;
                stan::math::assign(p_a_logit, goal_sub(w1_mean,w1_sd,w1,w2_mean,w2_sd,w2,delta,tau,Nobs,subj,expt,s1,s2,a_logd,b_logd,a_logt,b_logt,a_dot,b_dot,a_tod,b_tod, pstream__));
                current_statement_begin__ = 183;
                lp_accum__.add(bernoulli_logit_log<propto__>(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(1, get_base1(Nobs,subj,"Nobs",1)), stan::model::cons_list(stan::model::index_uni(subj), stan::model::nil_index_list())), "y"), p_a_logit));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("w1_mean");
        names__.push_back("w1_sd");
        names__.push_back("w1");
        names__.push_back("w2_mean");
        names__.push_back("w2_sd");
        names__.push_back("w2");
        names__.push_back("delta_mean");
        names__.push_back("delta_sd");
        names__.push_back("delta");
        names__.push_back("tau_mean");
        names__.push_back("tau_sd");
        names__.push_back("tau");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "goal_hier_nospace_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double w1_mean = in__.scalar_constrain();
        double w1_sd = in__.scalar_lb_constrain(0);
        vector<double> w1;
        size_t dim_w1_0__ = Nsubj1;
        for (size_t k_0__ = 0; k_0__ < dim_w1_0__; ++k_0__) {
            w1.push_back(in__.scalar_constrain());
        }
        double w2_mean = in__.scalar_ub_constrain(0);
        double w2_sd = in__.scalar_lb_constrain(0);
        vector<double> w2;
        size_t dim_w2_0__ = Nsubj2;
        for (size_t k_0__ = 0; k_0__ < dim_w2_0__; ++k_0__) {
            w2.push_back(in__.scalar_ub_constrain(0));
        }
        double delta_mean = in__.scalar_lub_constrain(0,1);
        double delta_sd = in__.scalar_lb_constrain(0);
        vector<double> delta;
        size_t dim_delta_0__ = Nsubj1;
        for (size_t k_0__ = 0; k_0__ < dim_delta_0__; ++k_0__) {
            delta.push_back(in__.scalar_lub_constrain(0,1));
        }
        double tau_mean = in__.scalar_lub_constrain(0,1);
        double tau_sd = in__.scalar_lb_constrain(0);
        vector<double> tau;
        size_t dim_tau_0__ = Nsubj2;
        for (size_t k_0__ = 0; k_0__ < dim_tau_0__; ++k_0__) {
            tau.push_back(in__.scalar_lub_constrain(0,1));
        }
        vars__.push_back(w1_mean);
        vars__.push_back(w1_sd);
            for (int k_0__ = 0; k_0__ < Nsubj1; ++k_0__) {
            vars__.push_back(w1[k_0__]);
            }
        vars__.push_back(w2_mean);
        vars__.push_back(w2_sd);
            for (int k_0__ = 0; k_0__ < Nsubj2; ++k_0__) {
            vars__.push_back(w2[k_0__]);
            }
        vars__.push_back(delta_mean);
        vars__.push_back(delta_sd);
            for (int k_0__ = 0; k_0__ < Nsubj1; ++k_0__) {
            vars__.push_back(delta[k_0__]);
            }
        vars__.push_back(tau_mean);
        vars__.push_back(tau_sd);
            for (int k_0__ = 0; k_0__ < Nsubj2; ++k_0__) {
            vars__.push_back(tau[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "goal_hier_nospace_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef goal_hier_nospace_model_namespace::goal_hier_nospace_model stan_model;

